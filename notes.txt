packet_ls_t get_path_group_packets(int requested_num_packets, int flow_idx) {
  packet_ls_t packets[$];
  if (requested_num_packets > num_packets_per_flow[flow_idx]) {
    requested_num_packets = num_packets_per_flow[flow_idx];
  }
  for (int i = 0; i < requested_num_packets; i++) {
    packets.push_back(path_group.flows[flow_idx].get_flow_packet());
  }
  num_packets_per_flow[flow_idx] -= requested_num_packets;
}

 if (requested_num_packets <= 0) {
   uvm_error(...)
   return packets;
 }






chip_flow_cfg.svh:
packet_ls_t get_path_group_pkts(int requested_num_packets) {
 int flow_idx;
 packet_ls_t packets[$];

 flow_idx = m_path_group.find(...);

 // Check if we have enough packets for this flow
 if (requested_num_packets > m_path_group.pkt_gen.num_packets_per_flow[flow_idx]) {
   requested_num_packets = m_path_group.pkt_gen.num_packets_per_flow[flow_idx];
 }

 for (int i = 0; i < requested_num_packets; i++) {
  packet pkt = m_path_group.main_flow.get_flow_packet();

  // Are there any other params?
  pkt.enet.da = flow_cfg.dmac;
  pkt.enet.sa = flow_cfg.smac;
  pkt.enet.vid = flow_cfg.vid;
  pkt.enet.complete_encapsulation();

  packets.push_back(pkt);
 }

 // Decrement to keep track of how many packets this flow has left
 num_packets_per_flow[flow_idx] -= requested_num_packets;
 return packets;
}

